Desarrollar una aplicación en Python utilizando Streamlit que permita analizar la calidad académica de un texto proporcionado, utilizando la API del modelo "meta-llama/Meta-Llama-3.1-70B-Instruct-Turbo". La aplicación deberá incluir las siguientes funcionalidades y características:

Interfaz de usuario:
Carga de texto:

Un área de texto donde el usuario pueda pegar directamente un párrafo o varios párrafos para el análisis.
Un componente para cargar archivos de texto soportados, incluyendo .txt, .pdf y .docx.
Botón de análisis:

Un botón para enviar el texto ingresado al modelo "Meta-Llama-3.1-70B-Instruct-Turbo" para su evaluación.
Resultados:

Mostrar en pantalla el análisis del texto en dos párrafos bien definidos:
Párrafo 1: Evaluación general de la claridad, coherencia y organización lógica del contenido.
Párrafo 2: Revisión específica sobre el uso de citas, fuentes confiables, precisión en la información y contribución al tema académico.
Definición de calidad académica:
Claves a evaluar:
Claridad y coherencia: Qué tan claro y bien estructurado es el contenido.
Lenguaje académico: Uso de terminología apropiada para la audiencia académica.
Citas y fuentes confiables: Qué tan bien se soportan las afirmaciones con fuentes confiables.
Precisión en la información: Alineación de los datos y argumentos con estándares académicos.
Contribución al campo: Originalidad y relevancia en el contexto del tema tratado.
Conexión con la API del modelo:
Configuración de la API:

Utilizar un archivo .env para almacenar el API_KEY y la URL base del modelo "Meta-Llama".
Crear un cliente API (basado en la clase AIMLClient) que gestione las solicitudes a la API del modelo.
Interacción con el modelo:

Enviar el texto al endpoint del modelo para realizar el análisis, asegurándose de estructurar los resultados en secciones claras y específicas.
Manejar errores de la API y mostrar advertencias al usuario si ocurre un problema.
Optimización del análisis:

Dividir textos largos en secciones para enviarlas secuencialmente al modelo.
Combinar los resultados en un formato legible y compacto para el usuario.
Resultados visuales:
Texto estructurado:
Mostrar cada sección con encabezados claros y comentarios del modelo.
Opcional: Agregar gráficos visuales como nubes de palabras para mostrar los términos más comunes en el texto analizado.
Notas adicionales:
Asegurar que la aplicación sea intuitiva y permita una experiencia fluida al usuario final.
Implementar validaciones para textos vacíos o entradas incorrectas.
Hacer que los resultados sean exportables en formato .txt o .pdf si el usuario lo solicita.